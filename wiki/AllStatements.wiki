#summary Statements grammar
<wiki:toc max_depth="3" />

= Statements =
The production of the grammar representing statements is:
<pre>_
statement:
    labeled-statement
    local-declaration-statement
    embedded-statement
    
embedded-statement:
    block
    empty-statement
    expression-statement
    if-statement
    switch-statement
    while-statement
    do-statement
    for-statement
    foreach-statement
    break-statement
    continue-statement
    goto-statement
    return-statement
    throw-statement
    try-statement
    synchronized-statement
    using-statement
    yield-statement
_</pre>
<pre>_
statement-list:
    statement
    statement-list statement
_</pre>

== Labeled statements ==
A label can be added to a statement. This label can be used by a {{{goto}}} statement to transfer control to this statement.
<pre>_
labeled-statement:
    identifier *:* statement
_</pre>

== Local declaration statements ==
The local declaration statement is used to declare and optionally initialize one or more local variables.
<pre>_
local-declaration-statement:
    type local-declarators
    *var* identifier *=* local-initializer
_</pre>
<pre>_
local-declarators:
    local-declarator
    local-declarators *,* local-declarator
_</pre>
<pre>_
local-declarator:
    identifier
    identifier *=* local-initializer
_</pre>
<pre>_
local-initializer:
    expression
    array-initializer
_</pre>

== Block statements ==
The block statement is used where a statement is required to perform multiple actions.
<pre>_
block:
    *{* statement-list,,opt,, *}*
_</pre>

== Empty statements ==
The empty statement is used where a statement is required but no actions have to be performed.
<pre>_
empty-statement:
    *;*
_</pre>

== Expression statements ==
The expression statement is used where a statement is required to evaluate an expression. Only method calls and assignments are allowed.
<pre>_
expression-statement:
    invocation-expression
    object-creation-expression
    assignement
    post-decrement-expression
    post-increment-expression
    pre-decrement-expression
    pre-increment-expression
_</pre>

== {{{if}}} statements ==
The {{{if}}} statement execute a statement based on the evaluation of a boolean expression.
<pre>_
if-statement:
    *if (* expression *)* embedded-statement
    *if (* expression *)* embedded-statement *else* embedded-statement
_</pre>

== {{{switch}}} statements ==
The {{{switch}}} statement execute a statement based on the evaluation of an ordinal or string expression.
<pre>_
switch-statement:
    *switch (* expression *) {* switch-sections,,opt,, *}*
_</pre>
<pre>_
switch-sections:
    switch-section
    switch-sections switch-section
_</pre>
<pre>_
switch-section:
    switch-labels statement-list
_</pre>
<pre>_
switch-labels:
    switch-label
    switch-labels switch-label
_</pre>
<pre>_
switch-label:
    *case* expression *:* 
    *default :*
_</pre>

== {{{while}}} statement ==
The {{{while}}} statement execute repeatedly a statement based on the evaluation of a boolean expression.
<pre>_
while-statement:
    *while (* expression *)* embedded-statement
_</pre>