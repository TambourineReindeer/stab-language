#summary Type names grammar

= Type names =
The syntax to write a type name is specified by: 
<pre>_
type:
    primitive-type
    array-type
    type-name
_</pre>
<pre>_
class-type:
    type-name
_</pre>
<pre>_
primitive-type:
    *One of: boolean byte short char int long float double*
_</pre>
<pre>_
return-type:
    type
    *void* 
    
package-or-type-name:
    type-name
_</pre>
<pre>_
type-name:
    identifier type-argument-list,,opt,, 
    type-name *.* identifier type-argument-list,,opt,,
_</pre>
<pre>_
type-argument-list:
    *<* type-arguments *>*
_</pre>
<pre>_
type-arguments:
    type-argument
    type-arguments *,* type-argument
    
type-argument:
    array-type
    type-name
    type-name *: ?* 
    *?* 
    *? :* type-name
    
array-type:
    non-array-type rank-specifiers
    
non-array-type:
    primitive-type
    type-name
_</pre>
<pre>_
rank-specifiers:
    rank-specifier
    rank-specifiers rank-specifier
_</pre>
<pre>_
rank-specifier:
    `[]`
_</pre>
Some examples of type names used to declare variables:
{{{
int v1; // an integer
char[] v2; // an array of characters
java.lang.Class<?> v3; // a class of any type
java.util.List<int[]> v4; // a list of arrays of integers
}}}